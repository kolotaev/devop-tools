#!/usr/bin/env ruby

require 'clamp'
require 'yaml'

# Set working dir
Dir.chdir(__dir__)

COMPOSES = 'composes'
VAGRANTS = 'vagrants'

Clamp do
  banner ['-' * 20, ' Devop for pleasure', '-' * 20].join "\n"

  subcommand ['docker', 'dc'], 'Run docker-compose for a set of services' do
    subcommand ['list', 'l'], 'Show all existing dockerized service-sets' do
      option "--ports", :flag, "show local ports that services use"
      def execute
        service_sets = list COMPOSES
        service_sets.each_entry do |name|
          if ports?
            Dir.chdir("#{COMPOSES}/#{name}") do
              file = File.exist?('docker-compose.yml') ? 'docker-compose.yml' : 'docker-compose.yaml'
              ports = YAML.load_file(file).fetch('services', {})
                      .map{ |k,v| v.fetch('ports', []) }.flatten
                      .map{ |v| v.split(':').first.to_i }.sort
              puts name + ' -> ' + ports.to_s
            end
          else
            puts name
          end
        end
      end
    end
    subcommand ['run', 'r'], 'Run docker-compose command' do
      parameter 'SRV', "specific service-set" do |srv|
        raise ArgumentError, 'Unknown service. Run list command' unless valid_item?(srv, 'composes')
        srv
      end
      parameter 'COMPOSE_COMMANDS ...', "docker-compose commands ", attribute_name: :cmds
      def execute
        Dir.chdir("#{COMPOSES}/#{srv}") do
          system('docker-compose', *cmds)
        end
      end
    end
  end

  subcommand 'vm', 'Run specified virtual machine' do
    subcommand ['list', 'l'], 'Show all existing VMs' do
      def execute
        puts list VAGRANTS
      end
    end
    subcommand ['run', 'r'], 'Run vagrant command' do
      parameter 'VM', "specific virtual machine" do |vm|
        raise ArgumentError, 'Unknown vm. Run list command' unless valid_item?(vm, 'vagrants')
        vm
      end
      parameter 'VAGRANT_COMMANDS ...', "vagrant commands ", attribute_name: :cmds
      def execute
        Dir.chdir("#{VAGRANTS}/#{vm}") do
          system('vagrant', *cmds)
        end
      end
    end
  end

  subcommand ['edit', 'e'], 'Edit source files' do
    parameter '[EDITOR]', "editor to open files with ", default: 'subl'
    def execute
      system(editor, '.')
    end
  end

  option ['-v', '--version'], :flag, 'Show version' do
    puts '0.1.0'
    exit(0)
  end

  private

  def list(dir)
    Dir.chdir(dir) do
      Dir.glob('*')
    end
  end

  def valid_item?(item, in_dir)
    list(in_dir).include? item
  end
end

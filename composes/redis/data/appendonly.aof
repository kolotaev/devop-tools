*2
$6
SELECT
$1
0
*6
$4
sadd
$1
q
$2
12
$3
234
$3
335
$2
67
*5
$4
sadd
$1
r
$2
87
$3
899
$3
090
*4
$4
zadd
$1
t
$2
78
$1
a
*4
$4
zadd
$1
t
$1
8
$1
b
*4
$4
zadd
$1
t
$2
78
$1
b
*4
$4
zadd
$1
t
$2
78
$1
c
*4
$4
zadd
$1
t
$2
78
$1
d
*4
$4
zadd
$1
t
$2
78
$1
e
*2
$6
SELECT
$1
0
*4
$4
zadd
$5
zset1
$1
1
$3
one
*4
$4
zadd
$5
zset1
$1
2
$3
two
*4
$4
zadd
$5
zset2
$1
1
$3
one
*4
$4
zadd
$5
zset2
$1
2
$3
two
*4
$4
zadd
$5
zset2
$1
3
$5
three
*8
$11
zinterstore
$7
out-tmp
$1
2
$5
zset1
$5
zset2
$7
WEIGHTS
$1
2
$1
3
*2
$6
SELECT
$1
0
*4
$4
sadd
$1
a
$3
foo
$3
bar
*4
$4
sadd
$1
b
$3
foo
$3
baz
*4
$4
zadd
$1
c
$2
15
$3
foo
*4
$4
zadd
$1
d
$2
16
$3
baz
*5
$11
zunionstore
$3
out
$1
2
$1
c
$1
d
*2
$3
del
$3
out
*2
$3
del
$7
out-tmp
*5
$11
zunionstore
$3
out
$1
2
$1
c
$1
d
*5
$11
zinterstore
$3
out
$1
2
$1
c
$1
d
*5
$11
zinterstore
$3
out
$1
2
$1
a
$1
b
*7
$11
zinterstore
$3
out
$1
2
$1
a
$1
b
$9
AGGREGATE
$3
max
*2
$3
del
$3
out
*7
$11
zinterstore
$3
out
$1
2
$1
a
$1
b
$9
AGGREGATE
$3
max
*7
$11
zinterstore
$3
out
$1
2
$1
a
$1
b
$9
AGGREGATE
$3
max
*7
$11
zinterstore
$3
out
$1
2
$1
a
$1
b
$9
AGGREGATE
$3
max
*10
$11
zinterstore
$3
out
$1
2
$1
a
$1
b
$7
WEIGHTS
$1
0
$1
0
$9
AGGREGATE
$3
max
*10
$11
zinterstore
$3
out
$1
2
$1
a
$1
b
$7
WEIGHTS
$4
-inf
$4
-inf
$9
AGGREGATE
$3
max
*2
$6
SELECT
$1
0
*2
$3
del
$5
zset2
*8
$11
zunionstore
$3
out
$1
2
$5
zset1
$5
zset2
$7
WEIGHTS
$1
2
$1
3
*8
$11
zunionstore
$3
out
$1
2
$3
tmp
$3
tmp
$7
WEIGHTS
$4
-inf
$4
-inf
*8
$11
zunionstore
$4
out1
$1
2
$3
tmp
$1
a
$7
WEIGHTS
$4
-inf
$4
-inf
*8
$11
zunionstore
$4
out1
$1
2
$3
tmp
$1
c
$7
WEIGHTS
$4
-inf
$4
-inf
*4
$4
eval
$40
return redis.call('set','lua-set','bar')
$1
0
$1
0
*4
$4
eval
$66
return redis.call('sadd','lua-set2',unpack({'11','22','33','44'}))
$1
0
$1
0
*4
$4
eval
$71
return redis.call('sadd','lua-set2',unpack(redis.call('smembers','a')))
$1
0
$1
0
*4
$4
eval
$89
return redis.call('SADD', 'lua-set3', unpack(redis.call('ZRANGEBYSCORE', 'zset1', 2, 2)))
$1
0
$1
0
*5
$4
sadd
$9
color:red
$1
a
$1
b
$1
d
*13
$4
sadd
$3
ids
$1
a
$1
b
$1
c
$1
d
$1
e
$1
f
$1
g
$1
h
$1
i
$1
j
$1
k
*4
$4
eval
$78
redis.call('SADD', 'not-red', unpack(redis.call('SDIFF', 'ids', 'color:red')))
$1
0
$1
0
*6
$4
hset
$3
h:1
$4
name
$3
foo
$3
age
$2
45
*6
$4
hset
$3
h:2
$4
name
$4
john
$3
age
$2
12
*4
$4
eval
$55
redis.call('SDIFFSTORE', 'not-red', 'ids', 'color:red')
$1
0
$1
0
*2
$3
del
$7
not-red
*4
$4
eval
$55
redis.call('SDIFFSTORE', 'not-red', 'ids', 'color:red')
$1
0
$1
0
*10
$4
zadd
$5
zset2
$1
1
$3
one
$1
2
$3
two
$1
3
$5
three
$1
4
$4
four
*4
$16
zremrangebyscore
$5
zset2
$1
3
$1
3
*4
$11
zunionstore
$9
zset2-tmp
$1
1
$5
zset2
*4
$4
eval
$91
redis.call('SADD', 'zset2-out', unpack(redis.call('ZRANGEBYSCORE', 'zset2', '(2', '+inf')))
$1
0
$1
0
*4
$4
eval
$88
redis.call('SADD', 'zset2-out', unpack(redis.call('ZRANGEBYSCORE', 'zset2', 2, '+inf')))
$1
0
$1
0
*4
$4
eval
$41
redis.call('SADD', 'zset2-out-nil', '{}')
$1
0
$1
0
*4
$4
eval
$42
redis.call('SADD', 'zset2-out-nil2', '{}')
$1
0
$1
0
*2
$6
SELECT
$1
0
*4
$4
zadd
$5
zset1
$1
2
$7
two-two
*7
$4
sadd
$4
set1
$2
45
$2
15
$1
1
$1
3
$1
2
*2
$3
del
$4
out1
*5
$11
zunionstore
$3
out
$1
2
$4
set1
$5
zset1
*8
$11
zinterstore
$3
out
$1
2
$4
set1
$5
zset1
$7
WEIGHTS
$1
1
$1
1
*4
$11
sunionstore
$3
out
$4
set1
$4
set2
*7
$4
sadd
$4
set2
$2
56
$2
78
$1
1
$1
3
$1
5
*4
$11
sunionstore
$3
out
$4
set1
$4
set2
*4
$11
sinterstore
$3
out
$4
set1
$4
set2
*2
$6
SELECT
$1
0
*9
$4
sadd
$7
doubles
$2
78
$1
6
$2
56
$1
6
$2
45
$1
6
$2
78
*4
$4
eval
$75
local t = {}; table.insert(t, 90); redis.call('SADD', 'doubles', unpack(t))
$1
0
$1
0
*4
$4
eval
$117
local t = {}; table.insert(t, 90); table.insert(t, 90); table.insert(t, 91); redis.call('SADD', 'doubles', unpack(t))
$1
0
$1
0
*4
$4
eval
$94
local t = {}; for n = 1,3 do table.insert(t, n); end; redis.call('SADD', 'doubles', unpack(t))
$1
0
$1
0
*4
$4
eval
$96
local t = {}; for n = 1,3 do table.insert(t, 888); end; redis.call('SADD', 'doubles', unpack(t))
$1
0
$1
0
*4
$4
eval
$98
local t = {}; for n = 1,3 do table.insert(t, 100+n); end; redis.call('SADD', 'doubles', unpack(t))
$1
0
$1
0
*4
$4
eval
$96
local t = {}; for _ = 1,3 do table.insert(t, 100); end; redis.call('SADD', 'doubles', unpack(t))
$1
0
$1
0
*4
$4
eval
$97
local t = {9}; for n = 1,5 do table.insert(t, nil); end; redis.call('SADD', 'doubles', unpack(t))
$1
0
$1
0
*2
$6
SELECT
$1
0
*5
$3
del
$3
out
$2
ui
$5
rytry
$2
uo
*4
$4
zadd
$5
zset1
$1
3
$3
two
*4
$4
zadd
$5
zset1
$1
4
$3
two
*4
$4
zadd
$5
zset1
$2
40
$3
two
*4
$4
hset
$6
myhash
$6
field1
$5
Hello
*6
$4
hset
$7
myhash2
$6
field1
$5
Hello
$6
field2
$3
555
*2
$6
SELECT
$1
0
*6
$4
hset
$7
users:1
$4
name
$3
Bob
$3
age
$2
45
*6
$4
hset
$7
users:2
$4
name
$4
Kate
$3
age
$2
13
*6
$4
hset
$7
users:3
$4
name
$3
Lim
$3
age
$2
39
*6
$4
hset
$7
users:8
$4
name
$5
Piggy
$3
age
$1
9
*6
$4
sadd
$12
users-result
$7
users:1
$7
users:2
$7
users:3
$7
users:8
*4
$4
eval
$27
redis.call('SADD', 'ss', 4)
$1
0
$1
0
*4
$4
eval
$28
redis.call('SADD', 'ss', 48)
$1
0
$1
0
*6
$4
sadd
$12
ausrs_result
$7
users:1
$7
users:2
$7
users:3
$7
users:8
*2
$6
SELECT
$1
0
*2
$3
del
$7
users:1
*6
$4
hset
$7
users:6
$3
age
$2
78
$4
namr
$5
marry
*6
$4
hset
$7
users:9
$3
age
$1
7
$4
namr
$3
mat
*3
$3
del
$7
users:6
$7
users:9
*2
$6
SELECT
$1
0
*4
$4
EVAL
$0

$1
0
$5
value
*4
$4
EVAL
$36
return redis.call('HGET', 'users:2')
$1
0
$0

*4
$4
EVAL
$39
return redis.call('HGETALL', 'users:2')
$1
0
$0

*4
$4
EVAL
$43
return redis.call('ZRANGE', 'zset1', 0, -1)
$1
0
$0

*4
$4
EVAL
$57
return redis.call('ZRANGE', 'zset1', 0, -1, 'WITHSCORES')
$1
0
$0

*3
$3
set
$8
lua-set2
$2
78
*3
$3
set
$8
lua-set2
$6
55.098
*3
$3
set
$8
lua-set2
$11
78undefined
*3
$3
set
$8
lua-set2
$2
78
*3
$3
set
$13
lua-set-float
$6
67.067
*4
$4
EVAL
$35
return redis.call('GET', 'lua-set')
$1
0
$0

*4
$4
EVAL
$36
return redis.call('GET', 'lua-set2')
$1
0
$0

*4
$4
EVAL
$41
return redis.call('GET', 'lua-set-float')
$1
0
$0

*4
$4
EVAL
$77
local foo
		foo = redis.call('HGETALL', 'users:2')
		return cjson.encode(foo)
$1
0
$0

*4
$4
EVAL
$53
return cjson.encode(redis.call('HGETALL', 'users:2'))
$1
0
$0

*4
$4
EVAL
$50
return cjson.encode(Map:make{a=1,b=2,c=3,d=4,e=5})
$1
0
$0

*4
$4
EVAL
$308
local collate = function (key)
  local raw_data = redis.call('HGETALL', 'users:2')
  local data = {}

  for idx = 1, #raw_data, 2 do
    data[raw_data[idx]] = raw_data[idx + 1]
  end

  return data;
end

local data = {}

for _, key in ipairs(KEYS) do
  data[key] = collate(key)
end

return cjson.encode(data)
$1
0
$0

*4
$4
EVAL
$182

  local raw_data = redis.call('HGETALL', 'users:2')
  local data = {}

  for idx = 1, #raw_data, 2 do
    data[raw_data[idx]] = raw_data[idx + 1]
  end

  return cjson.encode(data);
$1
0
$0

